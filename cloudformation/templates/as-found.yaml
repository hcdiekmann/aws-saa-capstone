AWSTemplateFormatVersion: 2010-09-09
Description: CF template for the as-found architecture of the Capstone project

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'CapstoneKey' # Replace with your key pair name
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: !Select [0, !GetAZs ''] # First AZ in the list
      MapPublicIpOnLaunch: true # Enable auto-assignment of public IP on launch
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet1'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  PublicRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  BastionHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH and HTTP access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: 'Name'
          Value: 'BastionHostSecurityGroup'

  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0e1c5d8c23330dee3 # Ensure this is the correct AMI ID for your region
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionHostSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd mariadb-server
          chkconfig httpd on
          service httpd start
          cd /home/ec2-user
          wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-2/21-course-project/s3/Countrydatadump.sql
          chown ec2-user:ec2-user Countrydatadump.sql
          cd /var/www/html
          wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-2/21-course-project/s3/Example.zip
          unzip Example.zip -d /var/www/html/
          chown -R ec2-user:ec2-user /var/www/html
          cd /home/ec2-user
          sudo systemctl enable mariadb.service
          sudo systemctl start mariadb.service
          database=$(aws ssm get-parameter --name "/example/database" --region "us-east-1" --query "Parameter.Value" --output text)
          password=$(aws ssm get-parameter --name "/example/password" --region "us-east-1" --query "Parameter.Value" --output text)
          username=$(aws ssm get-parameter --name "/example/username" --region "us-east-1" --query "Parameter.Value" --output text)
          echo "Database: $database"
          echo "Username: $username"
          mysql -u root << EOF
          CREATE DATABASE $database;
          CREATE USER '$username'@'localhost' IDENTIFIED BY '$password';
          GRANT ALL PRIVILEGES ON $database.* TO '$username'@'localhost';
          FLUSH PRIVILEGES;
          EOF
          mysql -u $username -p$password $database < Countrydatadump.sql

      IamInstanceProfile: 'LabInstanceProfile'
      Tags:
        - Key: 'Name'
          Value: 'BastionHost'

Outputs:
  BastionHostPublicIP:
    Description: 'IP address of the Bastion Host'
    Value: !GetAtt BastionHost.PublicIp
